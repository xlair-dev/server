//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

use super::sea_orm_active_enums::Difficulty;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sheets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub music_id: Uuid,
    pub difficulty: Difficulty,
    pub level: i32,
    pub notes_designer: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::musics::Entity",
        from = "Column::MusicId",
        to = "super::musics::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Musics,
    #[sea_orm(has_many = "super::records::Entity")]
    Records,
}

impl Related<super::musics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Musics.def()
    }
}

impl Related<super::records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Records.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
