//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub access_code: String,
    #[sea_orm(unique)]
    pub card: String,
    #[sea_orm(unique)]
    pub auth_id: Option<String>,
    #[sea_orm(unique)]
    pub user_name: Option<String>,
    pub display_name: String,
    pub rating: i32,
    pub xp: i64,
    pub credits: i64,
    pub is_admin: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::records::Entity")]
    Records,
}

impl Related<super::records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Records.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
